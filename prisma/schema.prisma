datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// user profile
model Profile {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  userId        String      @unique
  firstName     String
  lastName      String
  age           Int
  weight        Float
  height        Float
  activityLevel String

  FitnessGoal    FitnessGoal[]
  Workout        Workout[]
  Session        Session[]
  WorkoutPlan    WorkoutPlan[]
  WeightEntry    WeightEntry[]
  CalorieBurn    CalorieBurn[]
  FoodIntake     FoodIntake[]
  StaminaSession StaminaSession[]

  @@map("profiles")
}

/// fitness goals
model FitnessGoal {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profile      Profile  @relation(fields: [profileId], references: [id])
  profileId    String
  goalType     String
  targetValue  Float
  createdAt    DateTime @default(now())

  @@map("fitness_goals")
}

/// workouts
model Workout {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profile      Profile  @relation(fields: [profileId], references: [id])
  profileId    String
  bodyPart     String
  exerciseName String
  sets         Int
  reps         Int
  createdAt    DateTime @default(now())

  @@map("workouts")
}

/// Weekly workout schedule per user
model WorkoutPlan {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profile       Profile  @relation(fields: [profileId], references: [id])
  profileId     String
  dayOfWeek     Int      // 0=Sun, 1=Mon â€¦ 6=Sat
  bodyPart      String   // e.g. "Push", "Pull"
  repeatWeekly  Boolean  @default(false)
  createdAt     DateTime @default(now())

  @@unique([profileId, dayOfWeek])
  @@map("workout_plans")
}

/// gym sessions
model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profile      Profile  @relation(fields: [profileId], references: [id])
  profileId    String
  date         DateTime
  sessionData  Json

  @@map("sessions")
}

/// weight tracking entries
model WeightEntry {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profile      Profile  @relation(fields: [profileId], references: [id])
  profileId    String
  date         DateTime @default(now())
  weight       Float    // in kg or lbs based on user preference
  notes        String?

  @@map("weight_entries")
}

/// calories burned during workouts
model CalorieBurn {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profile      Profile  @relation(fields: [profileId], references: [id])
  profileId    String
  date         DateTime @default(now())
  activityType String   // e.g. "Running", "Weightlifting", etc.
  duration     Int      // in minutes
  caloriesBurned Int
  notes        String?

  @@map("calorie_burns")
}

/// food intake tracking
model FoodIntake {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profile      Profile  @relation(fields: [profileId], references: [id])
  profileId    String
  date         DateTime @default(now())
  mealType     String   // e.g. "Breakfast", "Lunch", "Dinner", "Snack"
  foodName     String
  calories     Int
  protein      Float?   // in grams
  carbs        Float?   // in grams
  fat          Float?   // in grams
  notes        String?

  @@map("food_intakes")
}

/// stamina/endurance tracking
model StaminaSession {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profile      Profile  @relation(fields: [profileId], references: [id])
  profileId    String
  date         DateTime @default(now())
  activityType String   // e.g. "Running", "Swimming", etc.
  distance     Float?   // in km or miles
  duration     Int      // in minutes
  avgHeartRate Int?     // beats per minute
  notes        String?

  @@map("stamina_sessions")
}
